/* script.js
- includes lots of notes for learning w/ json and fetch api
*/

/* STATIC FEATURES */
    // Sidebar
var sidebarContent = document.getElementById("sidebar-content");
var sidebarBtns = document.getElementsByClassName("sidebar-button");
var closeButton = document.getElementById("close");
closeButton.addEventListener("click", showInformation);
for (let btn of sidebarBtns) {
    btn.addEventListener("click", showInformation);
}
function showInformation() {
    if (this.id === "sidebar-info") {
        sidebarContent.style.display = "block";
        closeButton.style.display = "block";
        sidebarContent.innerHTML = "<br/><h3>what's mood island?</h3><br/>mood island's a digital diary, framed around a mini-internet island filled with plants!"
                                    + "<br/><p>the basics: view!</p><br/>click on a tile with a flower to view the diary entry."
                                    + "<br/><p>have some fun: add to the island!</p><br/>click on the toolkit to play around! this is where you can add new entries, edit/update them, or remove entries (that is, if they are yours. each entry has a passcode)."
                                    + "<br/><p>plant üå±</p><br/>here's where you can create a diary entry! click on üå±, and enter a title, passcode (**keep this safe!), and your diary entry.<br/>example:<br/>  title: a sunny day.<br/>   entry: today was super chilly, but i stayed in bed for most of the day to code and finish mood island. it's almost done, but it's getting late. i think i'll make some tea soon.<br/>click the plant button, then select where you want to plant it!<br/>note: if the island is full, you will have the option to expand it!"
                                    + "<br/><p>weed ‚õèÔ∏è</p><br/>here you can weed out (delete) your diary entry. just click on ‚õèÔ∏è, select your plant, enter the passcode, and click the erase button! at any point in time you can cancel."
                                    + "<br/><p>water üíß</p><br/>here you can update your diary entry. first click on üíß, select your plant, enter the passcode, and then your entry info will get pulled up. afterwards, go ahead and edit it to your heart's content, and click update!"
                                    + "</br>M/br><p>let's get planting!</p></br>";
        console.log("info button clicked");
    } else if (this.id === "sidebar-documentation") {
        sidebarContent.style.display = "block";
        closeButton.style.display = "block";
        sidebarContent.innerHTML = "<br/><h3>some info, credits, & documentation</h3><br/>this project was built with html, css, and js, using node.js and express."
                                    + " it fulfills the criteria of the athena award's <a href = \"https://express.athena.hackclub.com/home\">express project</a>,"
                                    + " and can be found on <a href = \"https://github.com/pepper-0/mood-island\">github here</a>."
                                    + "<br/><p>image credits</p>background: generated by Copilot<br/>flower sprites: generated by Copilot"
                                    + "<br/><p>color palette</p><ul><li>#e3e7e8</li><li>#7a828a</li><li>#bec1c2e4</li><li>#dfe2e2</li></ul>"
                                    + "<br/><p>v1</p> completed 10/18/25"
                                    + "<br/><p>last updated</p> 10/18/25 (26h)</br></br>";
        console.log("documentation button clicked");
    } else if (this.id === "close") {
        sidebarContent.innerHTML = ""; // clear sidebar content when toggled
        sidebarContent.style.display = "none";
        closeButton.style.display = "none"
    }
}

    // Toolkit
var toolkitButton = document.getElementById("toolkit-button");
var plantForm = document.getElementById("plant-form");
var weedingBlock = document.getElementById("weeding");
var wateringBlock = document.getElementById("watering");
toolkitButton.addEventListener("click", toggleToolkit);

function toggleToolkit() { // handle opening/closing toolkit 
    console.log("toolkit button clicked");
    var toolkitContent = document.getElementById("toolkit-content");

    if (window.getComputedStyle(toolkitContent).display == "none") {
        console.log("opening toolkit");
        toolkitButton.style.transform = "rotate(90deg)"; // rotate button when clicked
        toolkitContent.style.display = "flex";

    } else if (window.getComputedStyle(toolkitContent).display == "flex") {
        console.log("closing toolkit");
        toolkitButton.style.transform = "rotate(0deg)"; // un-rotate button when clicked
        toolkitContent.style.display = "none";
        plantForm.style.display = "none"; // hide all forms when closing toolkit
        weedingBlock.style.display = "none";
        wateringBlock.style.display = "none";
        featureMode = 0; // reset feature mode when closing toolkit, safety feature
        document.body.style.cursor = "default";
    }
}

var featureMode = 0; // 0 = clear, 1 = plant, 2 = shovel, 3 = water
const toolkitOptions = document.getElementsByClassName("toolkit-option");

for (let option of toolkitOptions) { // eventlisteners for toolkit features
    option.addEventListener("click", openFeature);
}

function openFeature() { // open up a toolbox feature 
    if (this.id === "toolkit-plant") {
        featureMode = 1;
        plantForm.style.display = "block";
        weedingBlock.style.display = "none";
        wateringBlock.style.display = "none";
        document.body.style.cursor = "";
        console.log("entered plant mode");
        resetWaterForm(0);
        resetWeedForm(0);
    } else if (this.id === "toolkit-shovel") {
        featureMode = 2;
        plantForm.style.display = "none";
        weedingBlock.style.display = "block";
        wateringBlock.style.display = "none";
        console.log("entered weed mode");
        handleWeed(0);
        resetWaterForm(0);
    } else if (this.id === "toolkit-water") {
        featureMode = 3;
        plantForm.style.display = "none";
        weedingBlock.style.display = "none";
        wateringBlock.style.display = "block";
        console.log("entered edit mode");
        handleWater(0);
        resetWeedForm(0);
    }
}

/* ISLAND */
var island = document.getElementById("island"); // the island div



/* INFORMATION BOX */
var infoContent = document.getElementById("info-content");

/* PLANT SUBMISSION SETUP */
var plantForm = document.getElementById("plant-form"); // the form itself
plantForm.addEventListener("submit", plantSubmit); // to submit your plant diary entry
var plantConfirmation = document.getElementById("plant-confirmation"); // confirmation message
var expandIsland = document.getElementById("expand-island"); // island expansion button
var plantSelector = document.getElementById("plant-selector"); // choose which plant
var plantChoices = document.getElementsByClassName("plant-choice");
for (let plantChoice of plantChoices) {
    plantChoice.addEventListener("click", choosePlantImg);
}
var selectedPlantImg = null; 
var entries = document.getElementById("entries"); // to update the entries shown in the page
let tileArray;
var allPlants = []; // holds all plalnt entries
var tilePlants = []; // holds all plants on island
let nSlots = 5; // default slots for 2D array

// fetch config then initialize structures that depend on nSlots
fetch('/config')
    .then(res => {
        if (!res.ok) throw new Error('config fetch failed');
        return res.json();
    })
    .then(cfg => {
        if (cfg && typeof cfg.nSlots === 'number' && cfg.nSlots > 0) 
            nSlots = cfg.nSlots;

        // tileArray: the container array
        tileArray = Array.from({ length: nSlots }, (_, row) =>
            Array.from({ length: nSlots }, (_, col) => ({ plant: null }))
        );

        assembleIsland();
        updateEntriesInPage();
    })
    .catch(err => {
        console.warn('Could not load config, using defaults:', err);
        // still initialize tileArray with default nSlots so page works
        tileArray = Array.from({ length: nSlots }, (_, row) =>
            Array.from({ length: nSlots }, (_, col) => ({ plant: null }))
        );
        assembleIsland();
        updateEntriesInPage();
    });

const islandPlatform = document.getElementById("island-platform"); // island itself
island.innerHTML = ""; // Clear any existing tiles

// place allPlant entries and place them in the tileArray and tilePlants if applicable
function assembleIsland() {
    console.log("assembling island");
    island.style.gridTemplateColumns = `repeat(${nSlots}, ${Math.floor(400/nSlots)}px)`; // dynamically set grid based on nSlots
    island.style.gridTemplateRows = `repeat(${nSlots}, ${Math.floor(400/nSlots)}px)`;
    for (plant of allPlants) { 
        var space = plant.tileID; // get tileID of plant
        if (space < 0 || space >= nSlots * nSlots) { // check if space is valid; otherwise add it into the tileArray and the tilePlants
            continue; // skip invalid tileIDs
        }
        var row = Math.floor(space / nSlots); // calculate row
        var col = space % nSlots; // calculate col
        tileArray[row][col].plant = plant; // place plant in tileArray
        tilePlants.push(plant); // add plant to tilePlants array
    }
}

/* HANDLE WATERING/PLANTING */
function openPlant(tileID) { // get the plant that corresponds to the tile (console log)
    console.log("tileID:", tileID);
    const plant = tilePlants.find(p => p.tileID === tileID && !p.erased); // get plant corresponding to this tile
    if (plant == null) {
        console.log("no plant for this tile");
        return;
    } else {
        console.log(`Title: ${plant.title}\nEntry: ${plant.entry}\nDate: ${plant.date}`);
        infoContent.innerHTML = `<h3>${plant.title}</h3><p>${plant.entry}</p><small>${plant.date}</small>`;
    }
}

async function plantSubmit(e) { // handle submitting the plant form
    e.preventDefault(); // prevent page from reloading
    plantConfirmation.innerHTML = "";

    /* START CODE HERE: functionality for clicking a tile to add to */
    // plantForm has a new div that asks where you'd like to select tile to: maybe make some visual styling that indicates this also
    const item = document.createElement("div");

    if (allPlants.length >= nSlots*nSlots) { // expand island 
        expandIsland.style.display = "block";
        expandIsland.addEventListener("click", expand);
    }

    plantConfirmation.innerHTML = "click on an empty tile slot to plant your entry there!";
    // consider that this may have to be removed later
    plantForm.appendChild(item);
    // cool functionality to consider later: hovered slot that shows if the thing is occupied or not. i don't wanna have to do that rn tho lol

    // you click on a plant. this should also have verifying code that ensures we are in the right feature mode    
    try {
        var tileID = await selectTile(); // okay i dunno what im doing physics is way too loud for this bro </3
    } catch (error) {
        tileID = -1; // will not be placed on island
    }

    var image;
    if (selectedPlantImg != null)
        image = selectedPlantImg;
    else 
        image = "assets/flowers/bush.png";

    // create data entry object
    const dataEntry = {
        // e.target is the form that was submitted
        tileID: tileID,
        title: e.target.title.value,
        erased: false,
        eraseCode: e.target.eraseCode.value,
        entry: e.target.entry.value,
        // taken straight from copilot lols, takes date and turns it into date str
        date: new Date().toISOString().split("T")[0],
        image: image
    }

    await fetch("/plants", { // send request to /plant endpoint in server.js (express server)
        method: "POST", // this is a post request
        headers: {
            "Content-Type": "application/json" // sending json data
        },
        body: JSON.stringify(dataEntry) // convert dataEntry to JSON str
    });

    // reset
    await updateEntriesInPage();
    plantForm.reset();
    selectedPlantImg = null;
    for (let plantChoice of plantChoices) {
        plantChoice.style.backgroundColor = "transparent";
    }
    plantConfirmation.innerHTML = "planting successful!";
}

async function expand() {
    try {
        nSlots++;
        // update
        await fetch('/config', {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify( {tileSize: nSlots})
        });

        // redo tilearray to ahve the correct size
        tileArray = Array.from({ length: nSlots }, (_, row) =>
            Array.from({ length: nSlots }, (_, col) => ({ plant: null }))
        );
        expandIsland.style.display = "none";
 
    } catch {
        console.log("LOL you thought u were done with this program huh. no youre not, youre cooked");
    }
    assembleIsland();
    updateEntriesInPage();
}

function choosePlantImg() {
    for (let plantChoice of plantChoices) {
        plantChoice.style.backgroundColor = "transparent";
    }
    this.style.backgroundColor = "#7a828a";
    if (this.id === "blue") {
        selectedPlantImg = "assets/flowers/blue_flower.png";
    } else if (this.id === "orange") {
        selectedPlantImg = "assets/flowers/orange_flower.png";
    } else if (this.id === "yellow") {
        selectedPlantImg = "assets/flowers/yellow_flower.png";
    } else if (this.id === "pink") {
        selectedPlantImg = "assets/flowers/pink_flower.png";
    } else if (this.id === "succulent") {
        selectedPlantImg = "assets/flowers/succulent.png";
    } else if (this.id === "bush") {
        selectedPlantImg = "assets/flowers/bush.png";
    }
}

/* PLANT-SPECIFIC SETUP */
var selectedPlant;

function selectTile() { // gh copilot; idk how to use promise
    return new Promise(resolve => {
        function onTileClick(e) {
            const tileID = parseInt(e.currentTarget.id);
            // Remove this temporary listener from all tiles
            for (let tile of document.getElementsByClassName("tile")) {
                tile.removeEventListener("click", onTileClick);
                // Optionally, restore the original handler here if needed
            }
            resolve(tileID);
        }
        // Add temporary listeners to all tiles
        for (let tile of document.getElementsByClassName("tile")) {
            tile.addEventListener("click", onTileClick);
        }
    });
}

/* HANDLE WEEDING/DELETING */
var cancelErase = document.getElementById("cancel-erase");
cancelErase.addEventListener("click", resetWeedForm);
var eraseConfirmation = document.getElementById("erase-confirmation");
var weedingForm = document.getElementById("weeding-form");
var confirmErase = document.getElementById("confirm-erase");
// stay in this function until you switch out and no longer want to remove a tile
async function handleWeed() {
    var removeID = await selectTile(); // choose which tile to erase
    cancelErase.style.display = "block";
    try {
        selectedPlant = allPlants.find(p => p.tileID === removeID && !p.erased);
    } catch {
        console.log("umm catching an error lols");
    }
    weedingForm.style.display = "block";
    // rest of plant handling proceeds in weedSubmit (when you submit hte erase code)
    
    var enteredEraseCode = await weedSubmit();

    // verify if erase code of plantRemove === entered erase code; if so, remove. try to do it with update entries in page (urgh)
    if (selectedPlant.eraseCode === enteredEraseCode) {
        await fetch(`/plants/${selectedPlant.tileID}`, { // send request to /plant endpoint in server.js (express server)
            method: "DELETE" // this is a delete request
        });
        updateEntriesInPage();
        resetWeedForm(1);
    } else {
        resetWeedForm(2);
    }
}

function resetWeedForm(code) { // 0 = neutral, 1 = success, 2 = failure
    // refresh so that form is cleared and not appearing
    weedingForm.style.display = "none";
    weedingForm.reset();
    cancelErase.style.display = "none";

    // show results for previous actions
    if (code === null || 0) {
        eraseConfirmation.innerHTML = "";
    } else if (code === 1) {
        eraseConfirmation.innerHTML = "entry has been erased! click on another plant to weed.";
    } else if (code === 2) {
        eraseConfirmation.innerHTML = "your erase code is incorrect. please try again.";
    }
    
    setTimeout(() => {
        handleWeed();
    }, 1000); // pause ui before calling handleweed
}

// handle when submission occurs for weed
function weedSubmit(e) {
    return new Promise(resolve =>  {
        function onSubmit(e) {
            e.preventDefault();
            weedingForm.removeEventListener("submit", onSubmit);
            var enteredEraseCode;
            try { // parse getting the submission erase code from weedSubmit
                enteredEraseCode = e.target.enteredEraseCode.value;
            } catch {
                enteredEraseCode = "";
            }

            resolve(enteredEraseCode);
        }
        weedingForm.addEventListener("submit", onSubmit); // submit the erase code
    });
}

/* HANDLE UPDATING */
var cancelWater = document.getElementById("cancel-water");
var wateringForm = document.getElementById("watering-form");
cancelWater.addEventListener("click", resetWaterForm);
var waterConfirmation = document.getElementById("water-confirmation");

var wateringUpdateForm = document.getElementById("watering-update-form");
wateringUpdateForm.addEventListener("submit", updatePlant);
var updateTitle = document.getElementById("update-title");
var updateEraseCode = document.getElementById("update-erase-code");
var updateEntry = document.getElementById("update-entry");

async function handleWater() {
    console.log("handle water called");
    var selectedID = await selectTile(); // choose which tile to erase
    console.log("got tile, it is", selectedID);

    // show necessary blocks
    cancelWater.style.display = "block";
    wateringForm.style.display = "block";

    console.log("showed things");

    try {
        selectedPlant = allPlants.find(p => p.tileID === selectedID && !p.erased);
    } catch {
        console.log("umm catching an error lols");
    }
    
    var enteredPassCode = await waterSubmit();

    // verify if erase code of plantRemove === entered erase code; if so, remove. try to do it with update entries in page (urgh)
    if (selectedPlant.eraseCode === enteredPassCode) {
        var response = await fetch(`/plants/${selectedPlant.tileID}`, { // send request to /plant endpoint in server.js (express server)
            method: "GET"// this is a delete request
        });
        var plant = await response.json(); // plant data
        try { // handle obtaining the update now
            wateringUpdateForm.style.display = "block";
            console.log("obtained the following plnat, this msg indicates we have entered the function that will permit users to modify: ", plant);
            updateTitle.value = plant.title;
            updateEraseCode.value = plant.eraseCode;
            updateEntry.value = plant.entry;

            wateringForm.style.display = "none";

//            await updatePlant(); // get the signal that it's ready (def not right but we'll let it slide for now)
        } catch {
            resetWaterForm(3);
        }  
    } else {
        resetWaterForm(1); // passcode incorrect lols
    }
}

async function updatePlant(e) {
    e.preventDefault();
    
    const dataEntry = {
        title: e.target.updatedTitle.value,
        eraseCode: e.target.updatedEraseCode.value,
        entry: e.target.updatedEntry.value
    }

    await fetch(`/plants/${selectedPlant.tileID}`, {
        method: "PATCH",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(dataEntry)
    });

    updateEntriesInPage();

    resetWaterForm(2);
}

function waterSubmit(e) { // submission for correct passcode 
    return new Promise(resolve =>  {
        function onSubmit(e) {
            e.preventDefault();
            wateringForm.removeEventListener("submit", onSubmit);
            var enteredPassCode;
            try { // parse getting the submission erase code from waterSubmit
                enteredPassCode = e.target.enteredPassCode.value;
            } catch {
                enteredPassCode = "";
            }

            resolve(enteredPassCode);
        }
        wateringForm.addEventListener("submit", onSubmit); // submit the erase code
    });
}

function resetWaterForm(code) { // 0 = neutral, 1 = erase code failure, 2 = success
    wateringForm.style.display = "none";
    wateringUpdateForm.style.display = "none";
    wateringForm.reset();
    wateringUpdateForm.reset();
    cancelWater.style.display = "none";

    if (code === null || 0) {
        waterConfirmation.innerHTML = "";
    } else if (code === 1) {
        waterConfirmation.innerHTML = "your passcode was incorrect! please try again.";
    } else if (code === 2) {
        waterConfirmation.innerHTML = "watering successful!";
    } else if (code === 3) {
        waterConfirmation.innerHTML = "unexpected error occurred D: sorry, im on a time crunch and probably didnt have time to fix this. oops";
    }

    setTimeout(() => {
        handleWater();
    }, 1000); // pause ui before calling handlewater again
}

/* TOOLKIT HELPER FUNCTIONS */

// function to fetch all entries from server and update the page (including the island)
async function updateEntriesInPage() {

    const response = await fetch("/plants"); // send request to /plant endpoint in server.js (express server)
    allPlants = await response.json(); // get json data from response

    entries.innerHTML = ""; // reset 
    tilePlants = []; // reset tilePlants array
    island.innerHTML = ""; 
    // these represent each item in tileArray
    for (let i = 1; i <= nSlots * nSlots; i++) { // provides #, matches tileID
        // find the corresponding plant for this tile
        const plant = allPlants.find(p => p.tileID === i && !p.erased);
        if (plant) {
            // display; the styling will be done here and add event listener

            const row = Math.floor((i - 1) / nSlots);
            const col = (i - 1) % nSlots;
            // defensive: ensure tileArray and row exist
            if (!tileArray || !tileArray[row]) {
                console.warn('tileArray not initialized correctly, skipping tileArray write for', i);
            } else {
                tileArray[row][col].plant = plant; // update tileArray with the plant
            }
            
            const item = document.createElement("div");
            item.style.width = `${Math.floor(400/nSlots)}px`;
            item.style.height = `${Math.floor(400/nSlots)}px`;
            const plantIcon = document.createElement("img");
            plantIcon.src = plant.image;
            plantIcon.className = "plantIcon";
            plantIcon.style.width = `${Math.floor(400/nSlots)}px`;
            plantIcon.style.width = `${Math.floor(400/nSlots)}px`;
            item.appendChild(plantIcon);
            item.className = "tile";
            item.id = i;
            item.plant = plant; // attach plant data to the div for easy access

            island.appendChild(item);

            item.addEventListener("click", () => {
                openPlant(item.plant.tileID);
            });

            // also add to tilePlants
            // NOTE: may have some overlap with erase updates, keep and eye on this
            tilePlants.push(plant);

        } else {
            // empty tile; display empty tile
            const item = document.createElement("div");
            item.className = "tile";
            item.style.width = `${Math.floor(400/nSlots)}px`;
            item.style.height = `${Math.floor(400/nSlots)}px`;
            item.id = i;
            island.appendChild(item);

        }
    }
    console.log("tilePlants:", tilePlants);
    console.log("fetched entries:", allPlants);
     
}